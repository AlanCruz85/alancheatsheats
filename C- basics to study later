
undefined4 main(void){
  __gid_t __rgid;
  
  setvbuf(stdout,(char *)0x0,2,0);
  __rgid = getegid();
  setresgid(__rgid,__rgid,__rgid);
  puts("You know who are 0xDiablos: ");
  vuln();
  return 0;
}

This function simply prints to screen and calls the function vuln
##########

void vuln(void){
  char local_bc [180];
  
  gets(local_bc);
  puts(local_bc);
  return;
}

A char array of size 180 is allocated that will hold the received input using the gets function and print it. This function was predicated since it is susceptible to suffer from buffer overflow attacks and was replaced by fgets. This is a potential attack vector and is worth further investigation.

gets() doesnâ€™t do any array bound testing. gets() keeps on reading until it sees a newline character. 
To avoid Buffer Overflow, fgets() should be used instead of gets() as fgets() makes sure that not more than MAX_LIMIT characters are read.
############


