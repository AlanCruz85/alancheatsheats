

_________________________________________________________________________________________________________________

Important Event Ids to check using Event Viewer:

  1 - General list of logs:
      https://www.malwarearchaeology.com/cheat-sheets
      https://wiki.sans.blue/#!Tools/WindowsEventLogsTable.md
              
  2 - Security log:
      https://www.xplg.com/windows-server-security-events-list/
      EventID: 5156 >>  The Windows Filtering Platform has permitted a connection.
      https://www.malwarearchaeology.com/cheat-sheets/ (in the 'sysmon' part, there is a comparison between sysmon and security logs. 
      
     *** Kerberos uses LogonType "3" >> network
  The most interesting LogonTypes seems to be 2 (local, besides of login in using Kerberos), 3 (network, like smb and kerberos) and 10 (RDP)
    
     
  3 - Sysmon log:
      https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/default.aspx?i=j
      https://systemweakness.com/list-of-sysmon-event-ids-for-threat-hunting-4250b47cd567
      https://www.malwarearchaeology.com/cheat-sheets/     (the sysmon part)
      
    
  _____________________________________________________________________________________________________________________________________________
  
  EVENT VIEWER - FILTERING
  
  You can to more precise filtering using the xml option. 
      Ex: Security Log, filtering by Logon Type and by Authentication Package:
      
     *[
     System[(EventID=4624)]
     and
     EventData[Data[@Name='LogonType']=3]
     and
     EventData[Data[@Name='AuthenticationPackageName']='NTLM']
     ]

  It seems that you use the tags in xml as 'nametag[]', unless it has a straight designed value.
  Ex: <System> <info> 'test' </info> </System> = System[info='test']
      <EventData> <Data> 'info' </Data> </EventData> = EventData[Data='info']
      
   You can view the info in xml to have a clue how to write the filtering.
      Ex:
      ...
      </System>
      <EventData>
          <Data Name="SubjectUserSid">S-1-5-18</Data> 
          <Data Name="SubjectUserName">SRV01$</Data> 
          <Data Name="SubjectDomainName">BOOCORP</Data> 
          <Data Name="SubjectLogonId">0x3e7</Data> 
          <Data Name="TargetUserSid">S-1-5-21-3330634377-1326264276-632209373-500</Data> 
          <Data Name="TargetUserName">Administrator</Data> 
          
          
   TO FILTER FOR NOT TO:
   
 <Suppress Path="Microsoft-Windows-Sysmon/Operational">
           *[System[(EventID=22)]]
        </Suppress>
   
Example:
  
            <QueryList>
              <Query Id="0" Path="Microsoft-Windows-Sysmon/Operational">
                <Select Path="Microsoft-Windows-Sysmon/Operational">*
             [
              EventData[Data[@Name='LogonType']=3]
              ]
            </Select>
                <Suppress Path="Microsoft-Windows-Sysmon/Operational">
                       *[System[(EventID=22)]]
                    </Suppress>
              </Query>
            </QueryList>
            
            
________________________________________________________________________________________________________

For persistance / privilege escalation


1 - Startup
In order to view the files added to the startup file, the indexes below must be checked.

C:\Users\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup

C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp

2 - Registry Run Keys

The following run keys are created by default on Windows systems:

● HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run
● HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce
● HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run
● HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce


The following Registry keys can be used to set startup folder items for persistence:


● HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\UserShellFolders
● HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\ShellFolders
● HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellFolders
● HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\UserShellFolders



The following Registry keys can control automatic startup of services during boot:


● HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices Once
● HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices Once
● HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices
● HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices




Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:

● HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run
● HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run


Source: mitre.org 
        https://app.letsdefend.io/training/lesson_detail/registry-run-keys-startup-folder


___________________________________________________________________________________________________________________________________________

POWERSHELL CMDLETs TO SEARCH
    
    ##INVOKE
    
    Invoke-Expression (Alias: iex)
    Invoke-WebRequest (Aliases: iwr, wget)
    Invoke-RestMethod
    Invoke-Command (Alias: icm)
    Invoke-Shellcode: Used to execute shellcode in memory, often used in memory-based exploitation techniques.
    
    Others that may be interesting:
    Invoke-Mimikatz
    Invoke-Obfuscation:  A framework used for obfuscating PowerShell code to evade detection and bypass security measures.
    Invoke-Phant0m: A script that can bypass security controls by invoking a phantom DLL into a PowerShell session.
    Invoke-NinjaCopy: Used to bypass file system security by copying files from a remote machine to the local machine.
    Invoke-PSImage: A script that embeds a PowerShell script into the pixels of a PNG image, allowing for hidden execution of PowerShell commands.
    
    ##
    IO.Compression.GzipStream($test,[IO.Compression.Compressionmode]::Decompress)
    [Convert]::FromBase64String
    
    ##System.Net Classes 
    WebClient
    WebRequest and WebResponse
    HttpClient
    HttpWebRequest and HttpWebResponse
    IPAddress and IPEndPoint
    DNS
    Socket
    TcpClient and TcpListener
    UdpClient
    WebProxy
          
_________________________________________________________________________________________________________________________________________________________________________________________

Source: https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/580595db9f745688bc7477f6/1476761074992/Windows+Logging+Cheat+Sheet_ver_Oct_2016.pdf

I prefer using Event Viewer, but just in case you need to use other option.

Using CLI:

1. WEvtUtil: Use this utility to query your logs
a. WevtUtil qe Security – query the Security Log for events
i. Lots of flags here so read help “WevtUtil -?”
ii. /c:5 = Read 5 events
iii. /rd:true = newest events first
iv. /f:text = format text, also can do XML
b. Success & Failed Logons - WevtUtil qe Security /q:"*[System[(EventID=4624 or EventID=4625)]]" /c:5 /rd:true
/f:text >Parsed\%computername%_Logon_Events_Win7.log
c. User Account Change - WevtUtil qe Security /q:"*[System[(EventID=4738)]]" /c:5 /rd:true /f:text
>Parsed\R_%computername%_User_Account_Change_Win7.log
d. New Service Installed - WevtUtil qe Security /q:"*[System[(EventID=7045)]]" /c:5 /rd:true /f:text
>Parsed\R_%computername%_New_Service_Installed_Win7.log
e. User Account Changes - wevtutil qe Security /q:"*[System[(EventID=4725 or EventID=4722 or EventID=4723 or
EventID=4724 or EventID=4726 or EventID=4767)]]" /c:10 /f:text

2. Filtering Log Results: Use this method to filter lines within the logs
a. Registry Changed – Find entries with ‘Object Name’ - WevtUtil qe Security /q:"*[System[(EventID=4657)]]" /c:5
/rd:true /f:text |find /i"Object Name"
b. File or Registry Changed – Find entries with ‘Object Name’ - WevtUtil qe Security /q:"*[System[(EventID=4663)]]"
/c:50 /rd:true /f:text |find /i "Object Name"
c. Files – Find new files with ‘Wbem’ - WevtUtil qe Security /q:"*[System[(EventID=4663)]]" /c:50 /rd:true /f:text
|find /i "wbem"
