
You do your normal malware analysis. You can use also a great tool to go deeper about analysing pdfs.

peepdf -i -f Update.pdf

Output:
    ...
    Objects with JS code (2): [26, 33]
            Suspicious elements:
                    /OpenAction (2): [26, 17]
                    /Launch (1): [26]
                    
Here, pay attention to the 'OpenAction' part. It means that, once the file is opened, it will launch the actions mencioned (objects 26 and 17)

You can use the command "object 26" to see what it does.


According to chatgpt:
        PDF files are composed of:
        Header: The PDF file begins with a header that identifies it as a PDF file and includes the version of the PDF specification it adheres to.
        Body: The body of a PDF file contains the main content and structure, consisting of objects and streams.
        Objects: PDF files are based on an object-oriented structure. Objects in a PDF file represent various elements such as text, images, fonts, annotations, and more. Each object has a unique object number and generation number, which serve as its identifier.
_____________________________________________________
About Objects:
https://tryhackme.com/r/room/maldoc

You can check the "/Type" part, to understand what is its role. 
The most interesting ones are "/Action", "/OpenAction" and "/Launch".
But it seems that, indeed, the important one is "/Action", because the other 2 seem to use this one to execute something.

/Action will be followed by "/S" with the type of action.

Ex:
5 0 obj
  << /Type /Action
     /S /URI
     /URI (......)

The most interesting ones seems to be:
URI Actions (/S /URI):
    URI actions open a Uniform Resource Identifier (URI), such as a web page, when triggered. They are commonly used for hyperlinks within the document, allowing users to navigate to external websites or resources.

Named Actions (/S /Named):
    Named actions represent predefined actions with specific behaviors, such as opening a new document, printing the current document, or executing a JavaScript script.

JavaScript Actions (/S /JavaScript):
    JavaScript actions execute JavaScript code when triggered. They can be used to add interactivity and dynamic behavior to PDF documents, such as form validation, calculations, or custom user interactions.
