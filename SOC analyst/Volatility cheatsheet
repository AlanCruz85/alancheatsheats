
INVESTIGATING WINDOWS MACHINE:

#### you can use "yarascan -Y" plugin to search recursively for a string (like 'grep' or 'Select-Strings')####
#### you can use the modules 'shimcache' and 'userassist' for PEs/files executed. 
'Pstree' and others display the process that were ran before the machine being shut down. So, maybe you will not see all the information there. 
<< For instance: the memory image was taken on March 22. But maybe some relevant process that was run on March 07 will not be displayed there, because the machine was restarted.>>
#### about memdump, after, use 'strings' with '-e l', to convert to utf-16. You will get more information.



Which process shows the highest likelihood of code injection?

The malfind plugin can be used to detect processes that potentially contain injected code (by a malicious .dll, or Injecting Code itself).
Search for something like "read,write and execute" privileges.
You can use "vadinfo" to dig deeper and see the .dll files that received the writing privileges.


What is the name of the injected dll file loaded from the recent process?

The ldrmodules plugin can be used to list the loaded modules (DLLs) in a process, and it can also be used to detect unlinked/hidden DLLs. We can use this plugin to examine the malicious svchost.exe process, which has a PID of 880.

python3 vol.py -f /home/remnux/Documents/BlackEnergy/CYBERDEF-567078-20230213-171333.raw windows.ldrmodules --pid 880

The msxml3r.dll does not exist in any of the 3 DLL lists (InLoad, InInit, and InMem). The columns InLoad, InInit, and InMem indicates whether a module has been loaded into memory, initialized, or is currently in the process memory. If all these columns are False, it may indicate the presence of a rootkit or other malicious software that is trying to hide its presence.
_________________________________________________________________________________________________________________________________________________________________

INVESTIGATING LINUX MACHINE:

https://github.com/volatilityfoundation/volatility/wiki/Linux-Command-Reference
+++ there is a plugin not listed in the above website: 
linux_enumerate_files

These labs made me learn a lot to use volatility for investigating linux in practice, specially doing Memory dump and using a new profile:

1 - Copy the zipped file to:
/home/kali/.local/lib/python2.7/site-packages/volatility/plugins/overlays/linux <<in my case>>. Search for '/volatility/plugins/overlays/linux' and you may find several. According to the permissions (if running vol2 with sudo or not), the right folder will be different;

2 - See if it worked with the command:
vol2 --info |grep Profiles -A 15

https://forensicskween.com/ctf/cyberdefenders/seized/
https://www.youtube.com/watch?v=JgWupk6gCMI
