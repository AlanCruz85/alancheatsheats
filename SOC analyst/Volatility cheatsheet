
INVESTIGATING WINDOWS MACHINE:

#### you can use "yarascan -Y" plugin to search recursively for a string (like 'grep' or 'Select-Strings')####

Process Injection
A great lab provided by 'CyberDefenders' made me learn more about how to find info about if a process injection attack took place.


Check the walkthroughs:
https://responderj01.medium.com/blackenergy-walkthrough-cyberdefenders-8502d4e37301
https://medium.com/@0x4kil/blackenergy-e10d28e7c796

5. Which process shows the highest likelihood of code injection?

The malfind plugin can be used to detect processes that potentially contain injected code.

Multiple processes were detected to potentially contain injected code, but I focused on analyzing svchost.exe due to the presence of the ‘MZ’ header.

python3 vol.py -f /home/remnux/Documents/BlackEnergy/CYBERDEF-567078-20230213-171333.raw -o /home/remnux/Documents/BlackEnergy/extracted/ windows.malfind --pid 880 --dump


7. What is the name of the injected dll file loaded from the recent process?

The ldrmodules plugin can be used to list the loaded modules (DLLs) in a process, and it can also be used to detect unlinked/hidden DLLs. We can use this plugin to examine the malicious svchost.exe process, which has a PID of 880.

python3 vol.py -f /home/remnux/Documents/BlackEnergy/CYBERDEF-567078-20230213-171333.raw windows.ldrmodules --pid 880

The msxml3r.dll does not exist in any of the 3 DLL lists (InLoad, InInit, and InMem). The columns InLoad, InInit, and InMem indicates whether a module has been loaded into memory, initialized, or is currently in the process memory. If all these columns are False, it may indicate the presence of a rootkit or other malicious software that is trying to hide its presence.
_________________________________________________________________________________________________________________________________________________________________

INVESTIGATING LINUX MACHINE:

https://github.com/volatilityfoundation/volatility/wiki/Linux-Command-Reference
+++ there is a plugin not listed in the above website: 
linux_enumerate_files

These labs made me learn a lot to use volatility for investigating linux in practice, specially doing Memory dump and using a new profile:

1 - Copy the zipped file to:
/home/kali/.local/lib/python2.7/site-packages/volatility/plugins/overlays/linux <<in my case>>. Search for '/volatility/plugins/overlays/linux' and you may find several. According to the permissions (if running vol2 with sudo or not), the right folder will be different;

2 - See if it worked with the command:
vol2 --info |grep Profiles -A 15

https://forensicskween.com/ctf/cyberdefenders/seized/
https://www.youtube.com/watch?v=JgWupk6gCMI
