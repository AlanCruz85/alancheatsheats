Code Review:
1 - identifying potentially insecure functions in use.
    Examples. For Mysql: 
    mysqli_query(); mysql_query(); mysqli_prepare(); query(); prepare()
    
    For php (in case of Local File Inclusion/LFI):
    require(); include(); require_once(); include_once()

2 - using grep to locate a function recursively. Example:
    grep -rn 'db_query('
    '-r' for recursively, and '-n' for displaying the file's name and line.

3 - See if there is sanitization of the input. Remender that vulnerabilities are exploited by input performed by user.
    For example: 

    $sql2 = "SELECT id, logtext FROM logs WHERE id='".preg_replace('/[^a-z0-9A-Z"]/', "", $_GET['log_id']). "'"; <<Secure code>>
    $sql2 = "SELECT id, logtext FROM logs WHERE id='".$_GET['log_id']). "'"; <<Insecure>>
    
    php file >> include('./gallery-files/'.$_GET['img']); <<Insecure>>

    another php file, related to XSS >> echo "<a href=\'index.php?content=newcomment&id=$recipeid'> Add comment </a>" <<Insecure, check $recipeid.>>
