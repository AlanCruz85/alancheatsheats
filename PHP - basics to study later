
$_SESSION[] >> access global variables, like the variables that I can see in a header when I do a request (user agent, referer...).

___________________________________________________________________________________________________________________________________
Creating New Session
==========================
<?php
session_start();
/*session is started if you don't write this line can't use $_Session  global variable*/
$_SESSION["newsession"]=$value;
?>
Getting Session
==========================
<?php
session_start();
/*session is started if you don't write this line can't use $_Session  global variable*/
$_SESSION["newsession"]=$value;
/*session created*/
echo $_SESSION["newsession"];
/*session was getting*/
?> 

Can be save, as example:
/var/lib/php/sess_<id>

SOURCE: https://www.php.net/manual/en/ref.session.php
_______________________________________________________________________________________________________________________________________________-

So my attention shifted completely towards discovering a method to achieve arbitrary writes so that ultimately I could gain php level RCE via LFI. I begun examining the /info endpoint (phpinfo’s output) for more clues. I discovered something very interesting:

session.upload_progress.cleanup is set to Off this opens the PHP session file LFI to RCE attack vector. This is because PHP will store its session files (when you upload a file) with the filenames as sess_<ID> within the following directories:

/tmp/sess_<id>
/tmp/sessions/sess_<id>
/var/lib/php/sess_<id>
/var/lib/php/sessions/sess_<id>
/var/lib/php<version>/sess_<id>
/var/lib/php<version>/sessions/sess_<id>
etc..

And will not delete them directly after writing them, indicating that we can either access the session files via symlinks (files that points to another path) or we’ll luck out and the session files will be written to the /tmp directory due to the fact that session.auto_start is set to Off:

I used curl to check for the existence of session files via exploiting the method explained in 0x01:

curl http://<IP>:<PORT> — cookie ‘PHPSESSID=test’ -F ‘PHP_SESSION_UPLOAD_PROGRESS=<PHP_CODE>’ -F ‘file=@junk_file’
<PHP_CODE> is where we can inject arbitrary PHP code to achieve php code RCE.

Explaining the same thing, source "hacktricks":

If you found a Local File Inclusion even if you don't have a session and session.auto_start is Off. If you provide the PHP_SESSION_UPLOAD_PROGRESS in multipart POST data, PHP will enable the session for you.

When the session.upload_progress.enabled INI option is enabled, PHP will be able to track the upload progress of individual files being uploaded.

SOURCE: https://d4rkstat1c.medium.com/mr-burns-hackthebox-writeup-c06f90a22fa9
        https://book.hacktricks.xyz/pentesting-web/file-inclusion/via-php_session_upload_progress

_______________________________________________________________________________________________________________________________________________________

 public function waf($s) {
        if (preg_match_all('/'. implode('|', array(
            '[' . preg_quote("(*<=>|'&-@") . ']',
            'select', 'and', 'or', 'if', 'by', 'from', 
            'where', 'as', 'is', 'in', 'not', 'having'
        )) . '/i', $s, $matches)) die(var_dump($matches[0]));
        return json_decode($s);
        
 The interesting part is the preg_quote. Because it put a backslash to escape the special chars, I think is a function that neutralizes attempts of sqli and xss.
 
 
