
SOURCE: https://medium.com/@zub3r.infosec/exploiting-prototype-pollutions-220f188438b2

"The vulnerability affects prototype based languages, the most famous and used one being JavaScript (JS). (...)

Prototypes are the mechanism by which objects can inherit features from one another. This means that objects can act as a template for other inheriting objects, that will themselves maybe be inherited and so on. This course of action is called a prototype chain. It is the reason why some objects will have properties of other objects and why it is so easy to transfer those properties."

My comments: I don't know the difference, but it seems to refer to objects as equivalent to the concept of class, and prototype as equivalent to inheritance. At least, it is easyer to understand that way.

" An attacker needs to be able to manipulate __proto__, the malicious actor could with that possibility change the applications behaviour.
As explained above, every object inherits the prototypes from their prototype (redCar from Car and Car from Object). Attackers could take advantage of that feature to pollute Object.prototype, which will cause each javascript object to be polluted.

redCar.__proto__.__proto__.toString = function() {
    console.log("Polluted with the __proto__ property")
};

Calling the toString() method on any object after executing this code would now log “Polluted with the __proto__ property” to the console, instead of returning a string that would represent the object as it should normally do."

In other words: you use the object to modify the atributes and functions that belong to the father.
_________________________________________________________________________________________________________________________________________________________

"Using the constructor property

Another way to achieve prototype pollution of all JS objects with the prototype property without using Object is to use the constructor property.
This property returns a reference to the Object constructor function that created the instance object. This means that, for our redCar instance, this will be the Car constructor function. But running it on an object created directly from Object.prototype like Car or any objects that got generated without intermediary constructor functions, will give us the desired Object prototype back.

simpleObject.constructor.prototype.toString = function() {
    console.log("Polluted with the constructor property.")
}  

SAME SOURCE: https://medium.com/@zub3r.infosec/exploiting-prototype-pollutions-220f188438b2
________________________________________________________________________________________________________________________________________________________

Remediation
SOURCE: https://www.acunetix.com/vulnerabilities/web/prototype-pollution/

"Use a JavaScript library that is using a safe <<merge>> or extend function to recursively copy properties from an untrusted source object."

Maybe it is related to the 'merge' function in js, I need to study more about that later.





