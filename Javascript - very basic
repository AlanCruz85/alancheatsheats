
In burpsuite, see the sequence of the files used when you do something, and filter the files that you wanna see.

Usually, main.js is interesting to understand a little better.

_________________________________________________________________________________________________________________________________________

Example of a main.js file:

$(document).ready(function(e) {

	displayActive();
	
	$('.page-link').click(function(e) {
		$(".page-item").removeClass('active')
		$(this).parent().addClass('active')
		displayActive();
	});

	$('#submitBtn').on('click', submitCsp);
});

$('[data-toggle="collapse"]').click(function(e) {
	$('.collapse.in').collapse('hide')
});
############################
This first part is like a summarize of the hole file. When the document is rendered, describes what will happen. The functions evoqued usually are described below;
The code is too long, so, to filter, see the name of the id/class you are interested (related to a place where you can manipulate data, for example, a form) and search for it in the code. In this case, the id 'cspText', related to a form, interested me
############################

const submitCsp = async () => {
	const csp = $('#cspText').val();
	if ($.trim(csp) === '') {
		addAlert('Submit a non empty CSP', 'info');
		return;
	}
	await fetch('/api/evaluate', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				csp: csp
			}),
		})
		.then((response) => {
			if(response.status !== 200){
				addAlert('Server error', 'danger');
			} else {
				response.json()
				.then((resp) => {
					addResponse(resp);
				})
			}

		})
		.catch((error) => {
			addAlert('There was an error connecting with the server', 'info');
		});
}

