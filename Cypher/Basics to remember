
Source: https://app.letsdefend.io

In cryptography, there are many criteria for the algorithm to be secure. One of these criteria is related to the randomness of key generation. For a crypto algorithm to be strong in cryptography, it is important that the key is long enough and random. Many random number generator methods have emerged to make the key random.

There are three types of Random Number Generators:

  True Random Number Generators (TRNG)
  Pseudorandom Number Generators (PRNG)
  Cryptographically Secure Pseudorandom Number Generators (CSPRNG)


True Random Generator is a method that generates random numbers based on real physical operations. An example of this type of random number generation is a coin flip or a dice toss.

The Pseudorandom Number Generator method needs an initial random value to ensure randomness. This value is called “seed”. This value can come from the TRNG method. It generates random numbers step by step according to some mathematical calculations over this first value.
Compared to the TRNG method, its application in practice is much easier and faster. But it is not secure and unpredictable enough for use in cryptography.
Ex: sudo echo $RANDOM

Cryptographically Secure Pseudorandom Number Generators (CSPRNG) is an unpredictable variant of PRNG. As in the PRNG method, it is not possible to predict and calculate the next value (0 or 1 bit) to be produced mathematically. The PRNG methods are frequently used in software testing, but CSPRNG is a cryptography-specific method.
Ex: od -An -N2 -i /dev/random

______________________________________________________________________________________________________________________________________

ENCODERS
“Base32” and “Base64” is a method of representing binary data with a specific character set based on “ASCII”.
“Base32” and “Base64” is an encoding method that allows sending text-based data to systems that process binary data type.
 It is an effective method to avoid some characters that may cause problems in the target system. For example, it provides the ability to transmit data in audio or video format to the target system as text-based.
 Base64 and Base32 encoding is never an encryption or decryption algorithm. 
 <<<It is also not recommended to be used for security purposes.>>>
 
 excelent explanation in: https://app.letsdefend.io/training/lesson_detail/base64-encodingdecoding
 
 _______________________________________________________________________________________________________________________________________________
 
 HASH
  Hash functions are not encryption/decryption algorithms. Therefore, the hash function does not need a key to perform operations.
  The goal is to provide integrity!!
  It doen't use keys, so, it is not encryption. You can't use hash with a mathematical operation to return the original value.
  If a problem has occurred in the transmission of the data or file and there has been a change in the bits of the file/data, hashes are used to understand this.
  
  "Passwords are kept in the form of hashes on the systems. Hash functions are different from other crypto algorithms. One of these differences, perhaps one of the most important, is that hash functions are unidirectional. Being one-way means that the input given to the hash function cannot be obtained over the hash."
 ______________________________________________________________________________________________________________________________________________________
 
 SSL/TLS
 The client uses the server's certificate to verify the identity of the server and to get the public key from the server to be used in communication with the server. The browser uses its own list of certificate authorities to verify certificates. If the certificate of the connected server does not belong to a trusted certificate authority, the browser considers it insecure and warns the user.
 
    1-The user sends a request to the server.
    2-The server sends its public key to the user along with its own SSL/TLS certificate.
    3-The user's browser checks and verifies whether the sent certificate is valid.
    4-The user's browser generates a randomly generated symmetric key and encrypts this symmetric key with the public key sent by the server and sends it to the server.
    5-The server decrypts the encrypted symmetric key with the private key and the symmetric key is sent to the server in a secure manner.
    6-From this stage onwards, the server encrypts every data to be sent to the user's browser using this symmetric key.
