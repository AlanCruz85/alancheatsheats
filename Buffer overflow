

See the file "C - basics"

The continued process will be using GDB with peda. The program was opened with the tool to check if the methodology can be performed, by checking if security features are turned off and start the exploit development.

checksec --file=./vuln
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partial

Since all the security features are turned off the planned methodology can be carried out. It is important to get familiar with Canary, NX, and ASLR.

If we launch GDB, we can use the “info file” command to see the entry point’s address. True enough, the entry point matches the address of start() (check the file with ghidra)

(gdb) info file
Symbols from "/home/kali/pentest/hackthebox/box/vuln".
Local exec file:
        `/home/kali/pentest/hackthebox/box/vuln', file type elf32-i386.
        Entry point: 0x80490d0
        0x08048194 - 0x080481a7 is .interp
        0x080481a8 - 0x080481cc is .note.gnu.build-id
        0x080481cc - 0x080481ec is .note.ABI-tag
        0x080481ec - 0x0804820c is .gnu.hash

Setting the breakpoint before and after gets(), we will be able to analyze the stack to ensure we only need 184 bytes (local_bc needs 180 bytes + 4 bytes of register EBP) to reach the location of the return (RET) address

(gdb) b *0x08049291
Breakpoint 1 at 0x08049291
(gdb) b *0x08049296
Breakpoint 2 at 0x0804296
(gdb) r

See the rest in the sources bellow. This was only to remind you of the basics.
SOURCE: https://shakuganz.com/2021/06/08/hackthebox-you-know-0xdiablos-write-up/
        https://weshsec.medium.com/htb-you-know-0xdiablos-4ad297fe75c0

_____________________________________________________________________________________________________________________________________________

