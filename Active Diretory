
A good definition that I found in https://app.letsdefend.io/training/lesson_detail/introduction-to-active-directory

About RPC:
   Source:ChatGPT
   "In summary, the DC uses the Group Policy processing engine to process GPOs, and applies the settings to computers and users in the domain by using remote procedure calls (RPCs) over the network."
   "In the case of Windows Active Directory, RPC typically uses TCP or UDP as the underlying network protocol, depending on the type of RPC operation being performed. For example, RPC over TCP is commonly used for authentication and directory service operations, while RPC over UDP is often used for replication operations, which require fast and efficient transmission of data over the network."

And a good explanation about how kerberos works:
    https://blog.netwrix.com/2022/08/18/what_is_kerberos/

__________________________________________________________________________________________________________________________________________________

If I can't download any file and can only use the commands native to that machine, see: https://academy.hackthebox.com/module/143/section/1360

_______________________________________________________________________________________________________________________________________________
DIFFERENCE BETWEEN KERBEROS TICKETS AND NORMAL CREDENTIALS

When we perform Kerberos authentication, we get a "ticket" that permits us to access the requested resource (i.e., a single machine). On the contrary, when we use a password to authenticate, that NTLM hash is stored in our session and can be used elsewhere without issue.


__________________________________________________________________________________________________________________________________________________
Domain Controller - Windows

Service: SMB
Version: Microsoft Windows Server 2019, Windows Server 2016, Windows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2
Try Zerologon exploit!!!

https://github.com/risksense/zerologon

________________________________________________________________________________________________________________________________________________

LLMNR & NBT-NS Primer
Source: HTB academy
https://academy.hackthebox.com/module/143/section/1272

Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification that can be used when DNS fails. If a machine attempts to resolve a host but DNS resolution fails, typically, the machine will try to ask all other machines on the local network for the correct host address via LLMNR. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. It uses port 5355 over UDP natively. If LLMNR fails, the NBT-NS will be used. NBT-NS identifies systems on a local network by their NetBIOS name. NBT-NS utilizes port 137 over UDP.

The kicker here is that when LLMNR/NBT-NS are used for name resolution, ANY host on the network can reply. This is where we come in with Responder to poison these requests. With network access, we can spoof an authoritative name resolution source ( in this case, a host that's supposed to belong in the network segment ) in the broadcast domain by responding to LLMNR and NBT-NS traffic as if they have an answer for the requesting host. This poisoning effort is done to get the victims to communicate with our system by pretending that our rogue system knows the location of the requested host. If the requested host requires name resolution or authentication actions, we can capture the NetNTLM hash and subject it to an offline brute force attack in an attempt to retrieve the cleartext password. The captured authentication request can also be relayed to access another host or used against a different protocol (such as LDAP) on the same host. LLMNR/NBNS spoofing combined with a lack of SMB signing can often lead to administrative access on hosts within a domain. SMB Relay attacks will be covered in a later module about Lateral Movement.

Let's walk through a quick example of the attack flow at a very high level:

    A host attempts to connect to the print server at \\print01.inlanefreight.local, but accidentally types in \\printer01.inlanefreight.local.
    The DNS server responds, stating that this host is unknown.
    The host then broadcasts out to the entire local network asking if anyone knows the location of \\printer01.inlanefreight.local.
    The attacker (us with Responder running) responds to the host stating that it is the \\printer01.inlanefreight.local that the host is looking for.
    The host believes this reply and sends an authentication request to the attacker with a username and NTLMv2 password hash.
    This hash can then be cracked offline or used in an SMB Relay attack if the right conditions exist

________________________________________________________________________________________________________________________
GET-ADUSER (enumerating if ServicePrincipalName, for kerberoasting)

First, import AD module
PS C:\htb> Import-Module ActiveDirectory

After
PS C:\htb> Get-ADUser -Filter {ServicePrincipalName -ne "$null"} -Properties ServicePrincipalName

__________________________________________________________________________________________________________________________

LDAP ANONYMOUS BIND
Besides ldapsearch, I can use windapsearch, seems to be easier.
"Tools such as windapsearch make this easier (though we should still understand how to create our own LDAP search filters). Here we can specify anonymous access by providing a blank username with the -u flag and the -U flag to tell the tool to retrieve just users."

alancruz@htb[/htb]$ ./windapsearch.py --dc-ip 172.16.5.5 -u "" -U

Windapsearch - Domain Admins
alancruz@htb[/htb]$ python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da

Windapsearch - Privileged Users
alancruz@htb[/htb]$ python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU

____________________________________________________________________________________________________________________________________________

LOCAL ADMINISTRATOR PASSWORD REUSE
Source: https://academy.hackthebox.com/module/143/section/1271

Internal password spraying is not only possible with domain user accounts. If you obtain administrative access and the NTLM password hash or cleartext password for the local administrator account (or another privileged local account), this can be attempted across multiple hosts in the network. Local administrator account password reuse is widespread due to the use of gold images in automated deployments and the perceived ease of management by enforcing the same password across multiple hosts.

CrackMapExec is a handy tool for attempting this attack. It is worth targeting high-value hosts such as SQL or Microsoft Exchange servers, as they are more likely to have a highly privileged user logged in or have their credentials persistent in memory.

alancruz@htb[/htb]$ sudo crackmapexec smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +
_____________________________________________________________________________________________________________________________________________

PASSWORD SPRAYING USING WINDOWS
Source: https://academy.hackthebox.com/module/143/section/1422

The tool will automatically generate a user list from Active Directory, query the domain password policy, and exclude user accounts within one attempt of locking out. 
PS C:\htb> Import-Module .\DomainPasswordSpray.ps1
PS C:\htb> Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue

